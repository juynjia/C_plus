// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "cftps.h"

/////////////////////////////////////////////////////////////////////////////
// CFtpServer

IMPLEMENT_DYNCREATE(CFtpServer, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CFtpServer properties

long CFtpServer::GetAction()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CFtpServer::SetAction(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

long CFtpServer::GetProfileAction()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CFtpServer::SetProfileAction(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

long CFtpServer::GetDeleteType()
{
	long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CFtpServer::SetDeleteType(long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

short CFtpServer::GetDirectoryCount()
{
	short result;
	GetProperty(0xa, VT_I2, (void*)&result);
	return result;
}

void CFtpServer::SetDirectoryCount(short propVal)
{
	SetProperty(0xa, VT_I2, propVal);
}

long CFtpServer::GetTotalLogins()
{
	long result;
	GetProperty(0xb, VT_I4, (void*)&result);
	return result;
}

void CFtpServer::SetTotalLogins(long propVal)
{
	SetProperty(0xb, VT_I4, propVal);
}

short CFtpServer::GetCurrentLogins()
{
	short result;
	GetProperty(0xc, VT_I2, (void*)&result);
	return result;
}

void CFtpServer::SetCurrentLogins(short propVal)
{
	SetProperty(0xc, VT_I2, propVal);
}

long CFtpServer::GetFilesSent()
{
	long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}

void CFtpServer::SetFilesSent(long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}

long CFtpServer::GetFilesReceived()
{
	long result;
	GetProperty(0xe, VT_I4, (void*)&result);
	return result;
}

void CFtpServer::SetFilesReceived(long propVal)
{
	SetProperty(0xe, VT_I4, propVal);
}

long CFtpServer::GetBytesSent()
{
	long result;
	GetProperty(0xf, VT_I4, (void*)&result);
	return result;
}

void CFtpServer::SetBytesSent(long propVal)
{
	SetProperty(0xf, VT_I4, propVal);
}

long CFtpServer::GetBytesReceived()
{
	long result;
	GetProperty(0x10, VT_I4, (void*)&result);
	return result;
}

void CFtpServer::SetBytesReceived(long propVal)
{
	SetProperty(0x10, VT_I4, propVal);
}

CString CFtpServer::GetUser()
{
	CString result;
	GetProperty(0x11, VT_BSTR, (void*)&result);
	return result;
}

void CFtpServer::SetUser(LPCTSTR propVal)
{
	SetProperty(0x11, VT_BSTR, propVal);
}

CString CFtpServer::GetPassword()
{
	CString result;
	GetProperty(0x12, VT_BSTR, (void*)&result);
	return result;
}

void CFtpServer::SetPassword(LPCTSTR propVal)
{
	SetProperty(0x12, VT_BSTR, propVal);
}

short CFtpServer::GetConnection()
{
	short result;
	GetProperty(0x13, VT_I2, (void*)&result);
	return result;
}

void CFtpServer::SetConnection(short propVal)
{
	SetProperty(0x13, VT_I2, propVal);
}

short CFtpServer::GetIdleTimeout()
{
	short result;
	GetProperty(0x14, VT_I2, (void*)&result);
	return result;
}

void CFtpServer::SetIdleTimeout(short propVal)
{
	SetProperty(0x14, VT_I2, propVal);
}

short CFtpServer::GetTimeout()
{
	short result;
	GetProperty(0x15, VT_I2, (void*)&result);
	return result;
}

void CFtpServer::SetTimeout(short propVal)
{
	SetProperty(0x15, VT_I2, propVal);
}

BOOL CFtpServer::GetLogFile()
{
	BOOL result;
	GetProperty(0x16, VT_BOOL, (void*)&result);
	return result;
}

void CFtpServer::SetLogFile(BOOL propVal)
{
	SetProperty(0x16, VT_BOOL, propVal);
}

CString CFtpServer::GetLogFileName()
{
	CString result;
	GetProperty(0x17, VT_BSTR, (void*)&result);
	return result;
}

void CFtpServer::SetLogFileName(LPCTSTR propVal)
{
	SetProperty(0x17, VT_BSTR, propVal);
}

CString CFtpServer::GetServerTitle()
{
	CString result;
	GetProperty(0x18, VT_BSTR, (void*)&result);
	return result;
}

void CFtpServer::SetServerTitle(LPCTSTR propVal)
{
	SetProperty(0x18, VT_BSTR, propVal);
}

short CFtpServer::GetSessions()
{
	short result;
	GetProperty(0x19, VT_I2, (void*)&result);
	return result;
}

void CFtpServer::SetSessions(short propVal)
{
	SetProperty(0x19, VT_I2, propVal);
}

CString CFtpServer::GetUserDatabaseFile()
{
	CString result;
	GetProperty(0x1a, VT_BSTR, (void*)&result);
	return result;
}

void CFtpServer::SetUserDatabaseFile(LPCTSTR propVal)
{
	SetProperty(0x1a, VT_BSTR, propVal);
}

BOOL CFtpServer::GetCustomLog()
{
	BOOL result;
	GetProperty(0x1b, VT_BOOL, (void*)&result);
	return result;
}

void CFtpServer::SetCustomLog(BOOL propVal)
{
	SetProperty(0x1b, VT_BOOL, propVal);
}

short CFtpServer::GetBufferSize()
{
	short result;
	GetProperty(0x1c, VT_I2, (void*)&result);
	return result;
}

void CFtpServer::SetBufferSize(short propVal)
{
	SetProperty(0x1c, VT_I2, propVal);
}

short CFtpServer::GetPort()
{
	short result;
	GetProperty(0x1d, VT_I2, (void*)&result);
	return result;
}

void CFtpServer::SetPort(short propVal)
{
	SetProperty(0x1d, VT_I2, propVal);
}

BOOL CFtpServer::GetNoPassword()
{
	BOOL result;
	GetProperty(0x1e, VT_BOOL, (void*)&result);
	return result;
}

void CFtpServer::SetNoPassword(BOOL propVal)
{
	SetProperty(0x1e, VT_BOOL, propVal);
}

BOOL CFtpServer::GetUppercase()
{
	BOOL result;
	GetProperty(0x1f, VT_BOOL, (void*)&result);
	return result;
}

void CFtpServer::SetUppercase(BOOL propVal)
{
	SetProperty(0x1f, VT_BOOL, propVal);
}

CString CFtpServer::GetDefaultDir()
{
	CString result;
	GetProperty(0x2c, VT_BSTR, (void*)&result);
	return result;
}

void CFtpServer::SetDefaultDir(LPCTSTR propVal)
{
	SetProperty(0x2c, VT_BSTR, propVal);
}

BOOL CFtpServer::GetUnixListing()
{
	BOOL result;
	GetProperty(0x2e, VT_BOOL, (void*)&result);
	return result;
}

void CFtpServer::SetUnixListing(BOOL propVal)
{
	SetProperty(0x2e, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CFtpServer operations

CString CFtpServer::GetDirectory(short index)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		index);
	return result;
}

void CFtpServer::SetDirectory(short index, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, lpszNewValue);
}

CString CFtpServer::GetExportName(short index)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		index);
	return result;
}

void CFtpServer::SetExportName(short index, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, lpszNewValue);
}

BOOL CFtpServer::GetReadPermission(short index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		index);
	return result;
}

void CFtpServer::SetReadPermission(short index, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, bNewValue);
}

BOOL CFtpServer::GetWritePermission(short index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		index);
	return result;
}

void CFtpServer::SetWritePermission(short index, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, bNewValue);
}

BOOL CFtpServer::GetListPermission(short index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		index);
	return result;
}

void CFtpServer::SetListPermission(short index, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, bNewValue);
}

BOOL CFtpServer::GetDeletePermission(short index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		index);
	return result;
}

void CFtpServer::SetDeletePermission(short index, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BOOL;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, bNewValue);
}

BOOL CFtpServer::AddUser(LPCTSTR User, LPCTSTR Password)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		User, Password);
	return result;
}

BOOL CFtpServer::DeleteUser(LPCTSTR User, short DeleteType)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		User, DeleteType);
	return result;
}

BOOL CFtpServer::AddDir(LPCTSTR User, LPCTSTR Directory, LPCTSTR ExportName, BOOL ReadPerm, BOOL WritePerm, BOOL ListPerm, BOOL DeletePerm)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_BOOL VTS_BOOL VTS_BOOL VTS_BOOL;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		User, Directory, ExportName, ReadPerm, WritePerm, ListPerm, DeletePerm);
	return result;
}

BOOL CFtpServer::RemoveDir(LPCTSTR User, LPCTSTR Directory)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		User, Directory);
	return result;
}

BOOL CFtpServer::Query(LPCTSTR User)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		User);
	return result;
}

BOOL CFtpServer::ListUsers()
{
	BOOL result;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CFtpServer::Listen(short Port)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x26, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Port);
	return result;
}

BOOL CFtpServer::Accept()
{
	BOOL result;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CFtpServer::Disconnect(short Connection)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Connection);
	return result;
}

BOOL CFtpServer::Close()
{
	BOOL result;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CFtpServer::Quit()
{
	BOOL result;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CFtpServer::LoginStats()
{
	BOOL result;
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CFtpServer::ModifyDir(LPCTSTR User, LPCTSTR Directory, LPCTSTR DefaultDir, BOOL ReadPerm, BOOL WritePerm, BOOL ListPerm, BOOL DeletePerm)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_BOOL VTS_BOOL VTS_BOOL VTS_BOOL;
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		User, Directory, DefaultDir, ReadPerm, WritePerm, ListPerm, DeletePerm);
	return result;
}

void CFtpServer::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
